# Python 상속(Inheritance) 학습 코드
# 상속: 기존 클래스의 속성과 메서드를 새로운 클래스가 물려받는 것
# 코드 재사용성을 높이고, 계층적 구조를 만들 수 있음

# ============================================================
# 1. Info 클래스 - 품종 정보를 관리하는 클래스
# ============================================================

class Info:
    """
    동물의 품종 정보를 관리하는 클래스
    - 다중 상속에서 사용할 추가 정보 클래스
    - 품종(breed) 정보만 담당
    """

    def __init__(self, breed):
        """
        Info 클래스 생성자

        Args:
            breed (str): 동물의 품종
        """
        # _breed: protected 변수 (클래스 내부와 상속받은 클래스에서 사용)
        # Python에서 _는 protected, __는 private를 의미 (관례적)
        self._breed = breed


# ============================================================
# 2. Animal 클래스 - 모든 동물의 기본 클래스 (부모 클래스)
# ============================================================

class Animal:
    """
    모든 동물의 기본이 되는 부모 클래스
    - 모든 동물이 공통으로 가지는 속성과 메서드 정의
    - 다른 동물 클래스들이 이 클래스를 상속받음
    """

    def __init__(self, name, age):
        """
        Animal 클래스 생성자

        Args:
            name (str): 동물의 이름
            age (int): 동물의 나이
        """
        self._name = name    # protected 변수: 이름
        self._age = age      # protected 변수: 나이

    def speak(self):
        """
        동물이 소리를 내는 메서드 (기본 구현)
        - 자식 클래스에서 오버라이딩(재정의)할 수 있음

        Returns:
            str: 동물의 기본 소리
        """
        return f"동물 소리를 냅니다."

    def move(self):
        """
        동물이 움직이는 메서드
        - 모든 동물이 공통으로 사용하는 메서드

        Returns:
            str: 동물의 움직임 설명
        """
        return f"동물이 움직입니다."


# ============================================================
# 3. Dog 클래스 - Animal과 Info를 다중 상속받는 자식 클래스
# ============================================================

class Dog(Animal, Info):
    """
    개를 나타내는 클래스 - 다중 상속 예제

    상속 관계:
    - Animal 클래스로부터 name, age, speak(), move() 상속
    - Info 클래스로부터 breed 상속

    특징:
    - 다중 상속: 여러 부모 클래스로부터 동시에 상속
    - 메서드 오버라이딩: 부모의 speak() 메서드를 재정의
    - 고유 메서드: tail() 메서드 추가
    """

    def __init__(self, name, age, breed):
        """
        Dog 클래스 생성자

        Args:
            name (str): 개의 이름
            age (int): 개의 나이  
            breed (str): 개의 품종
        """
        # 다중 상속에서 각 부모 클래스의 생성자를 명시적으로 호출
        Animal.__init__(self, name, age)    # Animal 부모 클래스 생성자 호출
        Info.__init__(self, breed)          # Info 부모 클래스 생성자 호출

        # 다른 방법: 직접 속성 설정도 가능
        # self._breed = breed

    def speak(self):
        """
        개가 소리를 내는 메서드 (메서드 오버라이딩)

        - 부모 클래스 Animal의 speak() 메서드를 재정의(오버라이딩)
        - 개에게 맞는 특별한 소리로 변경

        Returns:
            str: 개의 짖는 소리
        """
        return f"{self._name}: {self._breed} 멍멍!"

        # 부모 클래스의 원래 메서드를 호출하고 싶다면:
        # return super().speak()

    def tail(self):
        """
        개가 꼬리를 흔드는 메서드 (자식 클래스 고유 메서드)

        - Dog 클래스에서만 사용할 수 있는 고유한 메서드
        - 부모 클래스에는 없는 새로운 기능

        Returns:
            str: 꼬리 흔드는 행동 설명
        """
        return f"{self._name}이(가) 꼬리를 흔듭니다!"


# ============================================================
# 4. 상속 테스트 및 실행 예제
# ============================================================

def main():
    """
    상속 개념을 테스트하는 메인 함수
    """
    print("=========== 상속 =============")

    # Dog 객체 생성 - 다중 상속받은 클래스의 인스턴스 생성
    dog = Dog("멍멍이", 3, "진돗개")

    # 부모 클래스 Animal에서 상속받은 메서드 호출
    print(dog.move())   # 출력: "동물이 움직입니다."

    # 오버라이딩된 메서드 호출 (Dog 클래스에서 재정의한 버전)
    print(dog.speak())  # 출력: "멍멍이: 진돗개 멍멍!"

    # 자식 클래스 Dog에서만 제공하는 고유 메서드 호출
    print(dog.tail())   # 출력: "멍멍이이(가) 꼬리를 흔듭니다!"

    print()

    # 상속받은 속성들에 접근 (protected 변수들)
    print("========== 상속받은 속성들 ==========")
    print(f"이름: {dog._name}")     # Animal에서 상속받은 속성
    print(f"나이: {dog._age}")      # Animal에서 상속받은 속성
    print(f"품종: {dog._breed}")    # Info에서 상속받은 속성


# ============================================================
# 5. 추가 예제 - 다른 동물 클래스들
# ============================================================

class Cat(Animal):
    """
    고양이 클래스 - Animal만 단일 상속
    """

    def __init__(self, name, age):
        super().__init__(name, age)  # super()를 사용한 부모 생성자 호출

    def speak(self):
        """고양이만의 소리로 오버라이딩"""
        return f"{self._name}: 야옹~"

    def purr(self):
        """고양이 고유 메서드"""
        return f"{self._name}이(가) 그르렁거립니다."


class Bird(Animal):
    """
    새 클래스 - Animal만 단일 상속
    """

    def __init__(self, name, age):
        super().__init__(name, age)

    def speak(self):
        """새만의 소리로 오버라이딩"""
        return f"{self._name}: 짹짹!"

    def fly(self):
        """새 고유 메서드"""
        return f"{self._name}이(가) 하늘을 날아갑니다."


def test_other_animals():
    """
    다른 동물들로 상속 테스트
    """
    print("========== 다른 동물들 테스트 ==========")

    # 고양이 테스트
    cat = Cat("야옹이", 2)
    print(f"고양이 - {cat.speak()}")
    print(f"고양이 - {cat.move()}")    # 부모에서 상속받은 메서드
    print(f"고양이 - {cat.purr()}")    # 고양이 고유 메서드
    print()

    # 새 테스트
    bird = Bird("짹짹이", 1)
    print(f"새 - {bird.speak()}")
    print(f"새 - {bird.move()}")       # 부모에서 상속받은 메서드
    print(f"새 - {bird.fly()}")        # 새 고유 메서드


# ============================================================
# 프로그램 실행
# ============================================================

if __name__ == "__main__":
    # 기본 상속 예제 실행
    main()

    # 추가 동물들 테스트
    test_other_animals()


"""
============================================================
실행 결과 예상:
============================================================

=========== 상속 =============
동물이 움직입니다.
멍멍이: 진돗개 멍멍!
멍멍이이(가) 꼬리를 흔듭니다!

========== 상속받은 속성들 ==========
이름: 멍멍이
나이: 3
품종: 진돗개

========== 다른 동물들 테스트 ==========
고양이 - 야옹이: 야옹~
고양이 - 동물이 움직입니다.
고양이 - 야옹이이(가) 그르렁거립니다.

새 - 짹짹이: 짹짹!
새 - 동물이 움직입니다.
새 - 짹짹이이(가) 하늘을 날아갑니다.

============================================================
상속의 핵심 개념 정리:
============================================================

1. 상속 (Inheritance):
   - 기존 클래스의 속성과 메서드를 새 클래스가 물려받음
   - 코드 재사용성 증가, 유지보수 용이

2. 다중 상속 (Multiple Inheritance):
   - 여러 부모 클래스로부터 동시에 상속받음
   - class Dog(Animal, Info): 형태

3. 메서드 오버라이딩 (Method Overriding):
   - 부모 클래스의 메서드를 자식 클래스에서 재정의
   - 같은 이름의 메서드로 다른 동작 구현

4. 부모 클래스 생성자 호출:
   - Animal.__init__(self, name, age): 명시적 호출
   - super().__init__(name, age): super() 사용

5. 접근 제한자:
   - _변수명: protected (관례적, 내부/상속 클래스에서 사용)
   - __변수명: private (관례적, 클래스 내부에서만 사용)

6. 클래스 계층 구조:
   Animal (부모) → Dog (자식)
   Animal (부모) → Cat (자식)  
   Animal (부모) → Bird (자식)
   Info (부모) → Dog (자식) - 다중 상속
"""
